{% set rclone_remotes = labbot_rclone_configs | map(attribute="name") %}
#!/bin/bash

# Set start time seconds
start=$SECONDS

log="/var/log/backup-{{ container_name }}.log"

discord_user_id="{{ labbot_backup_report_mention_user_id }}"
rclone_conf_path="{{ labbot_rclone_config_location }}"

exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    docker unpause {{ container_name }}
    >&2 echo "\"${last_command}\" command failed with exit code ${exit_code}."
    backup_notify "failed"
    exit $exit_code
}

format_data_size() {
    declare -i i=${1:-$(</dev/stdin)};
    echo "${i}" | numfmt --to=iec-i --suffix=B --format="%9.2f" | xargs echo
}

backup_notify() {
    avatar="https://avatars.githubusercontent.com/u/24937341?s=120"
    # Get job duration
    duration=$(( SECONDS - start ))
    duration_human=$(date -d@${duration} -u +%H:%M:%S)

    # Get source data size
    src_size=$(du -sb "{{ bot_dir }}" | awk '{print $1}')
    src_size_human=$(format_data_size "$src_size")

    # Get previous and new backup sizes and calculate difference as a human-readable string
    last_backup_size=$(rclone --config $rclone_conf_path ls "{{ rclone_remotes[0] }}:" | tail -2 | head -1 | awk '{print $1}')
    this_backup_size=$(rclone --config $rclone_conf_path ls "{{ rclone_remotes[0] }}:${file}" | tail -1 | awk '{print $1}')

    this_backup_size_human=$(format_data_size "$this_backup_size")
    backup_size_diff=$(echo "$this_backup_size - $last_backup_size" | bc | format_data_size)
    # if first character of $backup_size_diff is not `-` or `0`, prefix with `+`
    [[ ${backup_size_diff:0:1} != "-" && ${backup_size_diff:0:1} != "0" ]] && backup_size_diff="+${backup_size_diff}"

    compression_ratio=$(echo "scale=2; $src_size / $this_backup_size" | bc -l)

    # Set colour red & mention user in message if backup failed
    # Set colour green and no mention if backup succeeded
    if [ "$1" == "failed" ]; then
        colour="16711680"
        content="<@!${discord_user_id}> Job failed!"
    else
        colour="65280"
        content=""
    fi

    json_string=$(jq -n \
                    --arg avatar "$avatar" \
                    --arg content "$content" \
                    --arg title "{{ container_name }}" \
                    --arg src_size "$src_size_human" \
                    --arg backup_size "$this_backup_size_human" \
                    --arg backup_size_diff "$backup_size_diff" \
                    --arg compression_ratio "$compression_ratio" \
                    --arg duration "$duration_human" \
                    --arg file_count "$file_count" \
                    --arg status "Result: ${1^}" \
                    --arg colour "$colour" \
                    --arg ts "$(date +'%Y-%m-%dT%H:%M:%S%z')" \
                    '{
                        "username": "Bots Backup",
                        "avatar_url": $avatar,
                        "content": $content,
                        "embeds": [
                            {
                                "title": $title,
                                "description": $status,
                                "fields": [
                                    {
                                        "name": "Source Size",
                                        "value": $src_size,
                                        "inline": true
                                    },
                                    {
                                        "name": "Compressed Size",
                                        "value": $backup_size,
                                        "inline": true
                                    },
                                    {
                                        "name": "Size v. Previous",
                                        "value": $backup_size_diff,
                                        "inline": true
                                    },
                                    {
                                        "name": "Compression Ratio",
                                        "value": $compression_ratio,
                                        "inline": true
                                    },
                                    {
                                        "name": "Backup Duration",
                                        "value": $duration,
                                        "inline": true
                                    },
                                    {
                                        "name": "Files Processed",
                                        "value": $file_count,
                                        "inline": true
                                    }
                                ],
                                "thumbnail": {"url": $avatar},
                                "color": $colour,
                                "timestamp": $ts
                            }
                        ]
                    }'
    )
    curl -s \
        -H "Content-Type: application/json" \
        -d "$json_string" \
        {{ webhook }}
}


# Logging - https://serverfault.com/a/103569/334038
exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
# Print START and current date to the log.
date>$log
printf "BACKUP START \n">>$log
exec 1>>$log 2>&1

archive="/tmp/{{ container_name }}_$(date +%Y-%m-%dT%H-%M-%S).tar.gz"

cd "{{ bot_dir }}"

echo -e "\n--- PAUSING BOT CONTAINER\n"

# Pause container
docker pause {{ container_name }} || exit_on_error

echo -e "\n--- ARCHIVING BOT DATA\n"

# Archive appdata
(tar --exclude='__pycache__' -cvf - . | pigz -c -5 -p $(nproc) > "$archive") || exit_on_error

echo -e "\n--- UNPAUSING BOT CONTAINER\n"

# Unpause container
docker unpause {{ container_name }}

# Get file count
file_count=$(gzip -cd "$archive" | tar -tvv | grep -c ^-)

# Upload to cloud
cd $(dirname "$archive")
file=$(basename "$archive")

{% for remote in rclone_remotes %}
echo -e "\n--- UPLOADING BACKUP TO RCLONE REMOTE '{{ remote }}'\n"

rclone --config $rclone_conf_path copyto -v "$archive" {{ remote }}:"$file" || exit_on_error

echo -e "\n--- PRUNING OLD BACKUPS IN RCLONE REMOTE '{{ remote }}' (none to prune if empty result)\n"

# Remove backups older than 1 month
rclone --config $rclone_conf_path delete -v --min-age 1M --include "{{ container_name }}-*.tar.gz" {{ remote  }}:
{% if not loop.last %}

{% endif %}
{% endfor %}

echo "--- REMOVING LOCAL COPY OF BACKUP"
rm -fv "$archive"

# Print END and two empty lines to the log.
printf "BACKUP END\n"

backup_notify "success"
